var searchIndex = JSON.parse('{\
"pki":{"doc":"PKI tools for Rust","t":"AAADDRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDDDEDNNNDNNNEDEGNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["chain","model","util","CertificateBuilder","CertificateVerifier","DEFAULT_CERT_VALIDITY_DAYS","DEFAULT_RSA_KEY_LENGTH","alt_names","borrow","borrow","borrow_mut","borrow_mut","build","ca_root","default","default","default_paths","from","from","into","into","new","new","not_after","not_before","path_len","private_key","serial_number","signer","subject","try_from","try_from","try_into","try_into","type_id","type_id","usage","verify","CA","CertName","CertNameEntries","CertNameRef","CertUsage","Certificate","CodeSign","Ec","InvalidParameters","KeyStore","MissingPrivateKey","Openssl","Other","PkiError","PrivateKey","PrivateKeyType","Result","Rsa","SystemTime","TlsClient","TlsServer","TlsServerAndClient","Verify","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certs","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","entries","entries","eq","eq","equivalent","equivalent","extended_usage","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_der","from_der","from_pem","from_pkcs12","from_pkcs8","from_pkcs8_der","from_pkcs8_pem","into","into","into","into","into","into","into","into","into","into_iter","key_type","new","new","new_ec","new_rsa","next","partial_cmp","partial_cmp","private_key","provide","source","subject_name","to_der","to_der","to_owned","to_owned","to_owned","to_owned","to_owned","to_pem","to_pkcs12","to_pkcs8","to_pkcs8_der","to_pkcs8_pem","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usage","create_easy_server_chain"],"q":[[0,"pki"],[3,"pki::chain"],[38,"pki::model"],[191,"pki::util"]],"d":["Certificate chain generation and validation","Model definitions","Utility functions","Certificate builder is used to create X.509 certificate …","Certificate chain verifier","Default validity days of the entity certificate","Default RSA key size","Specify DNS or IP names for the subjectAltName extension. …","","","","","Create X.509 certificate chain","Specify a custom CA root certificate","","","Enable standard trusted CA roots for validation, default …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new certificate builder with default parameters","Create new verifier instance","Specify expiration date of the certificate","Specify start date of the certificate","Specify pathlen parameter for CA certificate, default is …","Specify a custom private key for the certificate chain. If …","Specify serial number for the certificate, default is …","Specify certificate signer. If omitted or None a …","Specify certificate subject","","","","","","","Specify certificate usage","Verify a given certificate chain. The first element in the …","","DN-encoded X.509 name","X.509 name entries iterator","Reference to X.509 name","Certificate target usage","X.509 certificate","","","","A key store holding a private key and a chain of …","","","","PKI errors","PrivateKey represents a private key","Private key type","PKI result","","","","","","","Return number of bits in the private key","","","","","","","","","","","","","","","","","","","Return certificate chain of this key store, leaf …","","","","","","","","","","","Return entries iterator","Return entries iterator","","","","","Get the extended usage string","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Parse private key from DER format","Create certificate from DER format","Create certificate from PEM format","Load key store from the PKCS12/PFX file","Load key store from PEM-encoded PKCS8 file which contains …","Parse private key from encrypted PKCS8 DER format","Parse private key from PKCS8 PEM format","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return key type","Create new name from the parts, each part is a pair of …","Create new key store. The first certificate entry must be …","Create EC secp256r1 or secp384r1 private key","Create RSA private key with a given bit length","","","","Return private key of this key store","","","Get certificate subject name","Convert private key to DER format","Serialize certificate into DER format","","","","","","Serialize certificate into PEM format","Write key store to PKCS12/PFX file","Write key store to PEM-encoded PKCS8 file","Convert private key to encrypted PKCS8 DER format","Convert private key to PKCS8 PEM format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the usage string","Easily create a certificate chain to be used by TLS …"],"i":[0,0,0,0,0,0,0,1,1,5,1,5,1,5,1,5,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,5,1,5,1,5,1,5,17,0,0,0,0,0,17,20,24,0,24,24,20,0,0,0,0,20,24,17,17,17,24,10,14,22,3,24,20,17,10,6,21,14,22,3,24,20,17,10,6,21,3,20,17,10,6,21,20,17,10,6,21,14,21,20,17,20,17,17,24,24,20,17,10,6,21,14,14,22,3,24,24,24,24,20,17,10,10,6,6,21,21,10,6,6,3,3,10,10,14,22,3,24,20,17,10,6,21,22,10,14,3,10,10,22,20,17,3,24,24,6,10,6,20,17,10,6,21,6,3,3,10,10,24,14,22,3,24,20,17,10,6,21,14,22,3,24,20,17,10,6,21,14,22,3,24,20,17,10,6,21,17,0],"f":[0,0,0,0,0,0,0,[[1,2],1],[[]],[[]],[[]],[[]],[1,[[4,[3]]]],[[5,6],5],[[],1],[[],5],[[5,7],5],[[]],[[]],[[]],[[]],[[],1],[[],5],[[1,8],1],[[1,8],1],[[1,9],1],[[1,10],1],[[1,11],1],[[1,[13,[[12,[3]]]]],1],[[1,14],1],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[1,17],1],[[5,[18,[6]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[18,[6]]]],[20,20],[17,17],[10,10],[6,6],[21,21],[[]],[[]],[[]],[[]],[[]],[14,22],[21,22],[[20,20],7],[[17,17],7],[[],7],[[],7],[17,23],[[24,25],26],[[24,25],26],[[20,25],26],[[17,25],26],[[10,25],26],[[6,25],26],[[21,25],26],[[]],[27,14],[[]],[[]],[28,24],[[]],[29,24],[30,24],[[]],[[]],[[[32,[31]]],10],[[]],[33,6],[[]],[34,21],[[]],[[[18,[35]]],[[4,[10]]]],[[[18,[35]]],[[4,[6]]]],[[[18,[35]]],[[4,[6]]]],[[[18,[35]],23],[[4,[3]]]],[[[18,[35]]],[[4,[3]]]],[[[18,[35]],23],[[4,[10]]]],[[[18,[35]]],[[4,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,20],[2,[[4,[14]]]],[[10,2],[[4,[3]]]],[19,[[4,[10]]]],[19,[[4,[10]]]],[22,12],[[20,20],[[12,[36]]]],[[17,17],[[12,[36]]]],[3,10],[37],[24,[[12,[38]]]],[6,21],[10,[[4,[[39,[35]]]]]],[6,[[4,[[39,[35]]]]]],[[]],[[]],[[]],[[]],[[]],[6,[[4,[[39,[35]]]]]],[[3,23,23],[[4,[[39,[35]]]]]],[3,[[4,[[39,[35]]]]]],[[10,23],[[4,[[39,[35]]]]]],[10,[[4,[[39,[35]]]]]],[[],40],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[17,23],[23,[[4,[3]]]]],"c":[],"p":[[3,"CertificateBuilder"],[8,"IntoIterator"],[3,"KeyStore"],[6,"Result"],[3,"CertificateVerifier"],[3,"Certificate"],[15,"bool"],[3,"SystemTime"],[15,"i32"],[3,"PrivateKey"],[15,"u64"],[4,"Option"],[8,"Into"],[3,"CertName"],[4,"Result"],[3,"TypeId"],[4,"CertUsage"],[15,"slice"],[15,"u32"],[4,"PrivateKeyType"],[3,"CertNameRef"],[3,"CertNameEntries"],[15,"str"],[4,"PkiError"],[3,"Formatter"],[6,"Result"],[3,"X509Name"],[3,"SystemTimeError"],[3,"X509VerifyResult"],[3,"ErrorStack"],[4,"Private"],[3,"PKey"],[3,"X509"],[3,"X509NameRef"],[15,"u8"],[4,"Ordering"],[3,"Demand"],[8,"Error"],[3,"Vec"],[3,"String"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
